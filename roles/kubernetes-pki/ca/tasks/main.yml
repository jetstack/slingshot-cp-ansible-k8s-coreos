- name: CA | ensure local directroy exists
  file:
    path: "{{ paths.localSslDir }}"
    state: directory
    mode: 0755
  delegate_to: 127.0.0.1
  run_once: true

- name: CA | create ca configs
  template:
    src: "{{ item }}.j2"
    dest: "{{ paths.localSslDir }}/{{ item }}.json"
  delegate_to: 127.0.0.1
  run_once: true
  with_items:
  - ca-config
  - ca-csr

- name: CA | create ca template
  template:
    src: ca-csr.j2
    dest: "{{ paths.localSslDir }}/ca-csr.json"
  delegate_to: 127.0.0.1
  run_once: true
  register: pki_ca_csr

- name: CA | check if ca certificate exists
  stat:
    path: "{{ paths.localSslDir }}/ca.pem"
  delegate_to: 127.0.0.1
  run_once: true
  register: pki_ca_pem

- name: CA | generate ca
  shell: cfssl gencert -initca ca-csr.json | cfssljson -bare ca
  args:
    chdir: "{{ paths.localSslDir }}"
  delegate_to: 127.0.0.1
  run_once: true
  when: pki_ca_csr | changed or not pki_ca_pem.stat.exists

- name: CA | determine apiserver hostnames
  set_fact:
    pki_apiserver_hosts: >
      {{ kubernetes['masterSan'] + [
        "{{ kubernetes.masterApiUrl.split('//')[1].split(':')[0] }}",
        "{{ kubernetes.serviceIpApi }}",
        "kubernetes",
        "kubernetes.default",
        "kubernetes.default.svc",
        "kubernetes.default.svc.cluster.local",
        "127.0.0.1",
        "localhost"
        ]
        | unique | list
      }}

- name: CA | generate key pairs
  include: cert.yml
  with_items:
  - name: apiserver
    profile: server
  - name: admin-user
    profile: client
  - name: worker
    profile: client

