---
- name: flocker-ca create-control-certificate
  shell: "/ansible/flocker/bin/flocker-ca create-control-certificate {{ inventory_hostname }}"
  args:
    chdir: "{{ flocker_local_tempdir }}"
    creates: "control-{{ inventory_hostname }}.crt"
  delegate_to: 127.0.0.1

- name: copy user.crt to the node
  copy:
    src: "{{ flocker_local_tempdir }}/user.crt"
    dest: /etc/flocker/user.crt
  become: yes

- name: copy user.key to the node
  copy:
    src: "{{ flocker_local_tempdir }}/user.key"
    dest: /etc/flocker/user.key
    mode: 0600
  become: yes

- name: copy control key to the control node
  copy:
    src: "{{ flocker_local_tempdir }}/control-{{ inventory_hostname }}.key"
    dest: /etc/flocker/control-service.key
    mode: 0600
  become: yes

- name: copy control cert to the control node
  copy:
    src: "{{ flocker_local_tempdir }}/control-{{ inventory_hostname }}.crt"
    dest: /etc/flocker/control-service.crt
  become: yes

- name: write flockerctl wrapper to the master
  template:
    src: flockerctl.j2
    dest: /opt/bin/flockerctl
    mode: 0755
  become: yes

- name: create /etc/flocker/kubernetes on the node
  file:
    path: /etc/flocker/kubernetes
    state: directory
    mode: 0700
  become: yes

- name: "write kubernetes templates to node"
  template:
    src: "{{ item.name }}-{{ item.kind }}.yaml.j2"
    dest: "/etc/flocker/kubernetes/{{ item.name }}-{{ item.kind }}.yaml"
  with_items:
  - "{{ flocker_kubernetes}}"
  register: kube_templates
  become: yes

- name: "check if resources exists"
  command: >
    /opt/bin/kubectl
    --kubeconfig=/home/core/.kube/config
    --namespace=kube-system
    get {{ item.kind }} {{ item.name }}
  with_items:
  - "{{ flocker_kubernetes}}"
  changed_when: false
  register: kube_resources
  ignore_errors: true

- name: "apply resource config"
  command: >
    /opt/bin/kubectl
    --kubeconfig=/home/core/.kube/config
    apply -f /etc/flocker/kubernetes/{{ item.name }}-{{ item.kind }}.yaml
  with_items:
  - "{{ flocker_kubernetes}}"
  when: kube_templates|changed or kube_resources|failed
  become: yes
