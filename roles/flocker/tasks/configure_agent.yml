---
- name: create the node certs on the local machine
  shell: >
    mkdir {{ inventory_hostname }} &&
    /ansible/flocker/bin/flocker-ca create-node-certificate --outputpath={{ inventory_hostname }}/ &&
    mv {{ inventory_hostname }}/*.crt {{ inventory_hostname }}.crt &&
    mv {{ inventory_hostname }}/*.key {{ inventory_hostname }}.key &&
    rm -rf {{ inventory_hostname }}
  args:
    chdir: "{{ flocker_local_tempdir }}"
    creates: "{{ inventory_hostname }}.crt"
  delegate_to: 127.0.0.1

- name: copy node.crt to the node
  copy:
    src: "{{ flocker_local_tempdir }}/{{ inventory_hostname }}.crt"
    dest: /etc/flocker/node.crt
  become: yes

- name: copy node.key to the node
  copy:
    src: "{{ flocker_local_tempdir }}/{{ inventory_hostname }}.key"
    dest: /etc/flocker/node.key
    mode: 0600
  become: yes

- name: write agent.yml to the node
  template:
    src: agent.yml.j2
    dest: /etc/flocker/agent.yml
  become: yes

- name: setup hosts entry for control-service
  lineinfile:
    dest: /etc/hosts
    regexp: 'control-service$'
    line: "{{ hostvars[groups['kubernetes-master'][0]]['privateIP'] }} control-service"
    owner: root
    group: root
    mode: 0644
    create: yes
  become: yes

- name: create /etc/systemd/system/kubelet.service.d/ on the node
  file:
    path: /etc/systemd/system/kubelet.service.d/
    state: directory
  become: yes

- name: configure kubelet to use flocker
  template:
    src: systemd-kubelet-drop-in.j2
    dest: /etc/systemd/system/kubelet.service.d/30-flocker.conf
  become: yes
  notify:
  - reload systemd
  - restart kubelet
