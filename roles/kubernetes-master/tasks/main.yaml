- name: Starting kubelet service
  service: name=kubelet state=started

- name: Ensure kubelet will start after boot
  service: name=kubelet enabled=yes

- name: Waiting for API to start (stay patient - pulling images)
  wait_for: host=127.0.0.1 port=8080

- name: Creating Kubernetes namespace
  uri: >
    method=POST
    url=http://127.0.0.1:8080/api/v1/namespaces
    body='{"apiVersion":"v1","kind":"Namespace","metadata":{"name":"kube-system"}}'
  register: kube_result
  failed_when: >
      not (kube_result.status == 201 or (
          kube_result.status == 409 and
          'already exists' in kube_result.json.message))
  changed_when: "kube_result.status == 201"

- name: Creating service and replication controller specs for DNS.
  template: src={{item}}.yaml.j2 dest=/tmp/{{item}}.yaml
  with_items:
  - dns-addon-rc
  - dns-addon-svc
  tags: dns 

- name: Checking if DNS service already exists
  tags: dns 
  command: 
    /opt/bin/kubectl 
      --kubeconfig=/home/core/.kube/config 
      --namespace=kube-system
      get svc kube-dns
  register: rc
  failed_when: false
  changed_when: false

- name: Creating DNS service if not exists
  command: 
    /opt/bin/kubectl create 
      --kubeconfig=/home/core/.kube/config 
      -f /tmp/dns-addon-svc.yaml
  when: '"kube-dns" not in rc.stdout'
  tags: dns 

- name: Checking if DNS replication controller exists
  tags: dns 
  command: 
    /opt/bin/kubectl 
      --kubeconfig=/home/core/.kube/config 
      --namespace=kube-system
      get rc
  register: rc
  failed_when: false
  changed_when: false

- name: Creating DNS replication controller if not exists
  command: 
    /opt/bin/kubectl create 
      --kubeconfig=/home/core/.kube/config 
      -f /tmp/dns-addon-rc.yaml
  when: '"kube-dns" not in rc.stdout'
  tags: dns 

